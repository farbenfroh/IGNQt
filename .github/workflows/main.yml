name: 'Build Artifacts'

defaults:
  run:
    shell: bash

on:
  push:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: 'Set up cache'
      if: ${{ !env.ACT }}
      uses: actions/cache@v2
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}

    - name: 'Linux: Install OS dependencies'
      if: contains(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update -yq &&
        sudo apt-get install -yq g++ build-essential mesa-common-dev \
                                 libgl1-mesa-dev libxkbcommon-x11-0 libegl1-mesa \
                                 libopengl0 libxkb\* libxcb\* libwayland\* \
                                 libgtk-3-0 libatk1.0-0 libxcomposite1 libtk8.6

    - name: 'Install poetry'
      uses: abatilo/actions-poetry@v2.1.3
      with:
        poetry-version: 1.1.12
    - name: 'poetry: Install dependencies'
      run: |
        poetry config virtualenvs.in-project true
        poetry install
    - name: 'poetry: configure (Ubuntu, macOS)'
      if: ${{ contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macOS') }}
      run: echo "$PWD/.venv/bin" >> $GITHUB_PATH
    - name: 'poetry: configure (Windows)'
      if: contains(matrix.os, 'windows')
      run: echo "$PWD/.venv/Scripts" >> $GITHUB_PATH

    - name: 'Build Qt Files'
      run: |
        ./build-qt.sh
    - name: 'Build with PyInstaller'
      run: |
        ./make.sh

    - name: 'Upload artifacts'
      uses: actions/upload-artifact@v2
      with:
        name: ign-qt-${{ runner.os }}
        path: dist/*
        retention-days: 7
